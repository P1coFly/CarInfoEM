// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/car/add": {
            "post": {
                "description": "add car",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car"
                ],
                "summary": "Add",
                "parameters": [
                    {
                        "description": "Array of new car registration numbers",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RegNums"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/adder.AddResponse"
                        }
                    },
                    "206": {
                        "description": "Partial Content",
                        "schema": {
                            "$ref": "#/definitions/adder.AddResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    }
                }
            }
        },
        "/car/delete/{id}": {
            "delete": {
                "description": "delete car",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car"
                ],
                "summary": "Delete",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    }
                }
            }
        },
        "/car/patch/{id}": {
            "patch": {
                "description": "patch car",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "car"
                ],
                "summary": "Patch",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "new car data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/car.Car"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    }
                }
            }
        },
        "/cars": {
            "get": {
                "description": "get cars",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cars"
                ],
                "summary": "Get",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page size (default is 100)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page token (default is 1)",
                        "name": "page_token",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by year (format: 'start:end') example: 2000:2023",
                        "name": "year",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by registration number",
                        "name": "reg_num",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by car model",
                        "name": "model",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by car mark",
                        "name": "mark",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by owner name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by owner surname",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by owner patronymic",
                        "name": "patronymic",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/getter.GetResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/err_response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "RegNums": {
            "type": "object",
            "properties": {
                "reg_num": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "X123XX150"
                    ]
                }
            }
        },
        "adder.AddResponse": {
            "type": "object",
            "properties": {
                "cars_id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "failed_cars": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "car.Car": {
            "type": "object",
            "properties": {
                "mark": {
                    "type": "string",
                    "example": "Lada"
                },
                "model": {
                    "type": "string",
                    "example": "Vesta"
                },
                "owner": {
                    "$ref": "#/definitions/car.People"
                },
                "regNum": {
                    "type": "string",
                    "example": "X123XX150"
                },
                "year": {
                    "type": "integer",
                    "example": 2001
                }
            }
        },
        "car.CarWithOwner": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "mark": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/car.People"
                },
                "regNum": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "car.People": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Ivan"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Ivanovich"
                },
                "surname": {
                    "type": "string",
                    "example": "Ivanov"
                }
            }
        },
        "err_response.Response": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "getter.GetResponse": {
            "type": "object",
            "properties": {
                "carWithOwner": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/car.CarWithOwner"
                    }
                },
                "info": {
                    "$ref": "#/definitions/getter.Info"
                }
            }
        },
        "getter.Info": {
            "type": "object",
            "properties": {
                "last_page": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "CarInfo App API",
	Description:      "API server for obtaining information about the car",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
